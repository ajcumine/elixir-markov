defmodule Markov do
  @moduledoc """
  Documentation for Markov.
  """

  @doc """
  get_chain/2
  returns the Markov chain for a provided list and order

  ## Examples
      iex> list = ["the", "cat", "in", "the", "hat"]
      iex> Markov.get_chain(list, 1)
      %{
        "the" => ["cat", "hat"],
        "cat" => ["in"],
        "in" => ["the"],
        "hat" => [],
      }
      iex> Markov.get_chain(list, 2)
      %{
        "the cat" => ["in"],
        "cat in" => ["the"],
        "in the" => ["hat"],
        "the hat" => [],
      }
  """
  def get_chain(list, order) do
    list
    |> Enum.chunk_every(order + 1, 1)
    |> Enum.reduce(%{}, fn(x, acc) ->
      s = Enum.split(x, order)
      g = s |> elem(0) |> Enum.join(" ")
      f = elem(s, 1)
      if Map.has_key?(acc, g) do
        Map.merge(acc, %{g => f}, fn _k, v1, v2 ->
          v1 ++ v2
        end)
      else
        Map.put(acc, g, f)
      end
    end)
  end

  @doc """
  get_random_follower/2
  returns a random follower from Markov chain based on the gram

  ## Examples
      iex> chain = %{"the cat" => ["in"], "cat in" => ["the"], "in the" => ["hat"], "the hat" => []}
      iex> Markov.get_random_follower(chain, "the cat")
      "in"
  """
  def get_random_follower(chain, gram) do
    chain
    |> Map.get(gram)
    |> Enum.take_random(1)
    |> List.first
  end

  @doc """
  get_gram/2
  returns the next nth order gram from a reversed list

  ## Examples
      iex> list = ["in", "cat", "the"]
      iex> Markov.get_gram(list, 1)
      "in"
      iex> Markov.get_gram(list, 2)
      "cat in"
  """
  def get_gram(list, order) do
    list
    |> Enum.chunk_every(order)
    |> List.first()
    |> Enum.reverse()
    |> Enum.join(" ")
  end

  @doc """
  get_initial_gram/1
  returns a random key from the chain

  ## Examples
      iex> chain = %{ "the cat" => ["in"] }
      iex> Markov.get_initial_gram(chain)
      "the cat"
  """
  def get_initial_gram(chain) do
    chain
    |> Enum.take_random(1)
    |> hd()
    |> elem(0)
  end

  @doc """
  get_list_length/1
  returns the length of the list provided with whitepsace added

  ## Examples
      iex> list = ["the", "cat"]
      iex> Markov.get_list_length(list)
      7
  """
  def get_list_length(list) do
    list |> Enum.join(" ") |> String.length()
  end

  @doc """
  extend_list/5
  returns the list prepending a random gram from the chain based on:
  the gram, chain, order, and max_length

  ## Examples
      iex> chain = %{ "the cat" => ["in"], "cat in" => ["the"], "in the" => ["hat"], "the hat" => [] }
      iex> order = 2
      iex> config = %{ chain: chain, order: order }
      iex> max_length = 11
      iex> list = ["cat", "the"]
      iex> gram = "the cat"
      iex> length = 5
      iex> Markov.extend_list(config, max_length, list, gram, length)
      ["in", "cat", "the"]
  """
  def extend_list(_, max_length, list, _, length) when length > max_length do
    tl(list)
  end

  def extend_list(config, max_length, list, gram, _) do
    next_follower = get_random_follower(config.chain, gram)
    if next_follower do
      next_list = [next_follower | list]
      next_length = get_list_length(next_list)
      next_gram = get_gram(next_list, config.order)
      extend_list(config, max_length, next_list, next_gram, next_length)
    else
      list
    end
  end

  @doc """
  generate_reverse_text_list/4
  returns a reversed list of strings from the chain
  using the provided order, max_length, and gram

  ## Examples
      iex> chain = %{ "the cat" => ["in"], "cat in" => ["the"], "in the" => ["hat"], "the hat" => [] }
      iex> order = 2
      iex> config = %{ chain: chain, order: order }
      iex> max_length = 15
      iex> list = ["in", "cat", "the"]
      iex> gram = "cat in"
      iex> Markov.generate_reverse_text_list(config, max_length, list, gram)
      ["the", "in", "cat", "the"]
  """
  def generate_reverse_text_list(config, max_length, list, gram) do
    length = get_list_length(list)
    extend_list(config, max_length, list, gram, length)
  end

  @doc """
  generate_text/1-4
  returns a string of text generated by a
  Markov chain from the source text passed to it

  default arguments:
  order = 1
  max_length = 140

  ## Examples
      iex> body = "cat in the hat"
      iex> Markov.generate_text(body, 1, 10, "cat")
      "cat in the"
  """
  def generate_text(source_text, order \\ 1, max_length \\ 140, focus \\ nil) do
    text_list = String.split(source_text)
    chain = get_chain(text_list, order)
    intial_gram = if focus, do: focus, else: get_initial_gram(chain)
    initial_list = intial_gram |> String.split() |> Enum.reverse
    %{
      chain: chain,
      order: order,
    }
    |> generate_reverse_text_list(max_length, initial_list, intial_gram)
    |> Enum.reverse()
    |> Enum.join(" ")
  end

  @doc """
  generate_text_with_word/2
  returns a string of text generated by a
  Markov chain from the source text passed to it
  with the starting word passed in

  ## Examples
      iex> body = "the quick brown fox jumps over a lazy dog"
      iex> Markov.generate_text_with_word(body, "fox")
      "fox jumps over a lazy dog"
  """
  def generate_text_with_word(source_text, focus) do
    generate_text(source_text, 1, 140, focus)
  end
end
